import React, {useEffect, useState} from "react";
import {Button, Card} from "antd";
import {RootState} from "../reducers";
import {connect, useDispatch, useSelector} from "react-redux";
import {withRouter} from 'react-router-dom';
import PrintQueueCard from "../components/PrintQueueCard";
import * as actions from "../actions";
import {PrintQueue} from "../models";


const ConfigQueuesContainer =  withRouter(connect()(function ({}) {

	const dispatch = useDispatch();
	dispatch(actions.fetchQueuesIfNeeded());
	dispatch(actions.fetchDestinationsIfNeeded());

	const queues = useSelector((state: RootState) => state.queues.items);
	const destinations = useSelector((state: RootState) => state.destinations.items);

	const [newQueue, setNewQueue] = useState<PrintQueue | undefined>(undefined);
	useEffect(()=>{
		setNewQueue(undefined)
	}, [queues]);

	return (
		<Card loading={!(queues && Object.keys(queues).length > 0)}>
			<Card>
				<Button onClick={() => setNewQueue({})}>
					New Queue
				</Button>
			</Card>

			{
				// @ts-ignore look maybe you can sort out how to get that autogenerated component to spit out the right interface
				newQueue && <PrintQueueCard key={"new"} printQueue={newQueue} destinations={destinations}/>
			}

			{Object.values(queues).map((q: PrintQueue) => {
				// @ts-ignore look maybe you can sort out how to get that autogenerated component to spit out the right interface
				return <PrintQueueCard key={q._id} printQueue={q} destinations={destinations}/>
			})}

		</Card>
	)
}));

export default ConfigQueuesContainer