import React, {useEffect, useState} from "react";
import {Button, Card} from "antd";
import {RootState} from "../reducers";
import {connect, useDispatch, useSelector} from "react-redux";
import {withRouter} from 'react-router-dom';
import * as actions from "../actions";
import {Semester} from "../models";
import SemesterCard from "../components/SemesterCard";

function ModifySemestersContainer({shortUser}) {

	const semesterContainer = useSelector((state: RootState) => state.semesters.items[shortUser]);

	const [newSemester, setNewSemester] = useState<Semester | undefined>(undefined);
	useEffect(() => {
		setNewSemester(undefined)
	}, [semesterContainer]);

	const dispatch = useDispatch();

	const loading = semesterContainer === undefined;

	if (semesterContainer?.enrolled === undefined) {dispatch(actions.doFetchSemesters(shortUser, {queryfor: "enrolled"}))}
	if (semesterContainer?.granted === undefined) {dispatch(actions.doFetchSemesters(shortUser, {}))}

	if (loading || semesterContainer.granted === undefined) {
		return (<Card loading={true}/>);
	}


	console.log("semesterContainer", semesterContainer);
	return (
		<Card>
			<Card title={"Granted"}>
				<Button onClick={() => setNewSemester({})}>
					Add Semester
				</Button>
				{
					// @ts-ignore look maybe you can sort out how to get that autogenerated component to spit out the right interface
					newSemester && <SemesterCard key={"new"} shortUser={shortUser} semester={newSemester} isNew={true}/>
				}

				{semesterContainer.granted.map((s: Semester) => {
					// @ts-ignore look maybe you can sort out how to get that autogenerated component to spit out the right interface
					return <SemesterCard key={s.year + s.season} shortUser={shortUser} semester={s} isNew={false}/>
				})}
			</Card>
			{semesterContainer.enrolled?.length > 0 &&
			<Card title={"Enrolled"}>
				{semesterContainer.enrolled.map((s: Semester) => {
					// @ts-ignore look maybe you can sort out how to get that autogenerated component to spit out the right interface
					return <SemesterCard key={s.year + s.season} shortUser={shortUser} semester={s} isSuggested={true}/>
				})}
			</Card>}
		</Card>
	)
}

const mapStateToProps = (state, ownProps) => ({
	shortUser: ownProps.match.params.shortUser
});

export default withRouter(connect(mapStateToProps)(ModifySemestersContainer))