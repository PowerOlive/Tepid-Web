import React, {useEffect, useState} from "react";
import {Button, Card} from "antd";
import {RootState} from "../reducers";
import {connect, useDispatch, useSelector} from "react-redux";
import {withRouter} from 'react-router-dom';
import * as actions from "../actions";
import {FullDestination, PrintQueue} from "../models";
import DestinationCard from "../components/DestinationCard";

const ConfigDestinationsContainer = withRouter(connect()(function ({}) {
	const dispatch = useDispatch();
	dispatch(actions.fetchDestinationsIfNeeded());

	const destinations = useSelector((state: RootState) => state.destinations.items);

	const [newDestination, setNewDestination] = useState<FullDestination | undefined>(undefined);
	useEffect(()=>{
		setNewDestination(undefined)
	}, [destinations]);

	return (
		<Card loading={!(destinations && Object.keys(destinations).length > 0)}>
			<Card>
				<Button onClick={() => setNewDestination({})}>
					New Destination
				</Button>
			</Card>

			{
				// @ts-ignore look maybe you can sort out how to get that autogenerated component to spit out the right interface
				newDestination && <DestinationCard key={"new"} destination={newDestination}/>}

			{Object.values(destinations).map((d: FullDestination) => {
				// @ts-ignore look maybe you can sort out how to get that autogenerated component to spit out the right interface
				return <DestinationCard key={d._id} destination={d}/>
			})}
		</Card>
	)
}));

export default ConfigDestinationsContainer